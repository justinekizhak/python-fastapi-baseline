from typing import Any, Optional
from uvicorn.importer import ImportFromStringError as ImportFromStringError, import_from_string as import_from_string
from uvicorn.middleware.asgi2 import ASGI2Middleware as ASGI2Middleware
from uvicorn.middleware.debug import DebugMiddleware as DebugMiddleware
from uvicorn.middleware.message_logger import MessageLoggerMiddleware as MessageLoggerMiddleware
from uvicorn.middleware.proxy_headers import ProxyHeadersMiddleware as ProxyHeadersMiddleware
from uvicorn.middleware.wsgi import WSGIMiddleware as WSGIMiddleware

TRACE_LOG_LEVEL: int
LOG_LEVELS: Any
HTTP_PROTOCOLS: Any
WS_PROTOCOLS: Any
LIFESPAN: Any
LOOP_SETUPS: Any
INTERFACES: Any
SSL_PROTOCOL_VERSION: Any
LOGGING_CONFIG: Any
logger: Any

def create_ssl_context(certfile: Any, keyfile: Any, password: Any, ssl_version: Any, cert_reqs: Any, ca_certs: Any, ciphers: Any): ...

class Config:
    app: Any = ...
    host: Any = ...
    port: Any = ...
    uds: Any = ...
    fd: Any = ...
    loop: Any = ...
    http: Any = ...
    ws: Any = ...
    lifespan: Any = ...
    log_config: Any = ...
    log_level: Any = ...
    access_log: Any = ...
    use_colors: Any = ...
    interface: Any = ...
    debug: Any = ...
    reload: Any = ...
    reload_delay: Any = ...
    workers: Any = ...
    proxy_headers: Any = ...
    root_path: Any = ...
    limit_concurrency: Any = ...
    limit_max_requests: Any = ...
    backlog: Any = ...
    timeout_keep_alive: Any = ...
    timeout_notify: Any = ...
    callback_notify: Any = ...
    ssl_keyfile: Any = ...
    ssl_certfile: Any = ...
    ssl_keyfile_password: Any = ...
    ssl_version: Any = ...
    ssl_cert_reqs: Any = ...
    ssl_ca_certs: Any = ...
    ssl_ciphers: Any = ...
    headers: Any = ...
    encoded_headers: Any = ...
    loaded: bool = ...
    reload_dirs: Any = ...
    forwarded_allow_ips: Any = ...
    def __init__(self, app: Any, host: str = ..., port: int = ..., uds: Optional[Any] = ..., fd: Optional[Any] = ..., loop: str = ..., http: str = ..., ws: str = ..., lifespan: str = ..., env_file: Optional[Any] = ..., log_config: Any = ..., log_level: Optional[Any] = ..., access_log: bool = ..., use_colors: Optional[Any] = ..., interface: str = ..., debug: bool = ..., reload: bool = ..., reload_dirs: Optional[Any] = ..., reload_delay: Optional[Any] = ..., workers: Optional[Any] = ..., proxy_headers: bool = ..., forwarded_allow_ips: Optional[Any] = ..., root_path: str = ..., limit_concurrency: Optional[Any] = ..., limit_max_requests: Optional[Any] = ..., backlog: int = ..., timeout_keep_alive: int = ..., timeout_notify: int = ..., callback_notify: Optional[Any] = ..., ssl_keyfile: Optional[Any] = ..., ssl_certfile: Optional[Any] = ..., ssl_keyfile_password: Optional[Any] = ..., ssl_version: Any = ..., ssl_cert_reqs: Any = ..., ssl_ca_certs: Optional[Any] = ..., ssl_ciphers: str = ..., headers: Optional[Any] = ...) -> None: ...
    @property
    def asgi_version(self) -> str: ...
    @property
    def is_ssl(self) -> bool: ...
    def configure_logging(self) -> None: ...
    ssl: Any = ...
    http_protocol_class: Any = ...
    ws_protocol_class: Any = ...
    lifespan_class: Any = ...
    loaded_app: Any = ...
    def load(self) -> None: ...
    def setup_event_loop(self) -> None: ...
    def bind_socket(self): ...
    @property
    def should_reload(self): ...
